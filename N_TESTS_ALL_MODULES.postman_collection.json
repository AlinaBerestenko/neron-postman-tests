{
	"id": "255c25b6-db9f-9447-5986-bd7efcb8190c",
	"name": "N_TESTS_ALL_MODULES",
	"description": "",
	"order": [
		"b59b7bbc-ea23-0698-5004-67599eb175d6",
		"addbe965-2192-90a7-78ab-aa4f4f4a69fd",
		"c16016e0-3523-e4ff-6763-ed54a111c7f4",
		"c7ea2cff-52c6-a622-d2ff-57cccac9b2f0",
		"955f9e7c-0140-cf1f-663c-c02fc1f69171",
		"7dfbf073-da4a-af31-7caa-8e04205a743d",
		"877ca2ca-bdb7-b06a-261a-b38e0b70f140",
		"9c851005-8366-5d55-2483-42e19231d842",
		"c45aa2b7-6f62-55a3-0fd9-5ebeac50e306",
		"500c6e70-7381-1974-04f3-c959f098adca",
		"a418fec8-46cc-694f-6161-1d0fed8a54c4",
		"8a50c0ed-d8ee-e8df-b6ab-f8e1be3c6267",
		"9a3efe77-8079-2636-c3fa-26d381ddc6d3",
		"5e3ddc8e-99ed-d5be-aed1-b6cc9b40067b",
		"bd93a233-972e-c78b-ebaf-e069fbfe38ec",
		"ea4d839e-bbfd-6e74-0e52-28f3b8824177",
		"ba37d982-eb54-50b7-6cdc-93b46acb2ab4",
		"21711ff0-38ec-ee42-4025-09203f92b7d5",
		"46cb376e-a1d7-c2aa-bf6b-f160603c1dbc",
		"e466b220-2d48-b3f1-f785-99e4735b1e13",
		"08777d4e-f32c-a513-9ef3-ea202e5eb0ef",
		"759af4e9-cf67-3f6c-3f47-f8091393f824",
		"58ffc440-acfa-9132-e8a8-a0d86e1d16d4",
		"772de700-f29d-2aee-7468-bfa53d3d32c6",
		"0181db3d-5163-861f-8154-7fe05a76158b",
		"436b6da1-ec44-eff5-dce9-5963f4611b3d",
		"9e0bc662-3d27-8df2-5b02-699444d55170",
		"7da504c0-032d-c2c9-87de-acbafd49d43d",
		"772c5a7e-48d9-de0b-07a6-ba01a1cbc7f8",
		"84d4d68a-a9e2-d28c-62e5-1c8280ad50ba",
		"b8c0cf83-4465-7dd7-c6a7-2ddd4f55d82e",
		"7917cde1-9460-ce10-24b6-e7c5396a7391",
		"67afbbdc-17a8-a612-c332-fa946bc6b0bc",
		"704c8a66-24be-0617-1e31-8b93c51022e7",
		"bf0a7e60-8163-56b2-ed08-db2fbc3898fd",
		"693f7780-c95a-3252-dad8-81a8673239ec",
		"4f6e2023-067c-3f44-c365-3acffb47e157",
		"200f2f49-ba7f-1c6f-20a5-6a8c13986f7d",
		"6ad6f6d9-6710-bd9d-7d5b-7b36744bf2ee",
		"b453ead8-4775-1397-61d4-41fad3205392",
		"c4cbda85-f101-2900-39b7-d0b553ee8b17",
		"71f926d9-f9b5-5686-6b62-873089ccc176",
		"7a58520b-55c2-e376-7dae-513811f30bb4",
		"a7ebc6a5-5c18-989a-e3e3-98c1af913694",
		"9bf4e87d-3d65-98ec-d238-2fa81e595143",
		"106d3a20-e4ba-5e04-e635-64e4e2b15e64",
		"a3fafe44-2eb1-2a2e-8017-5c8124f40e87",
		"c6dec5c9-d0a0-93b6-fc33-a2d03080ea64",
		"1a4e0be0-431f-af2e-6b93-de2cc1956940",
		"b3587295-3546-5046-eb50-4d1ccdfef644",
		"167ccaaa-9f0a-15f9-1ebb-bc4a010487f4",
		"b60fe73d-c229-3874-55ce-fcb03bf6088c",
		"dd3a417a-e9d5-56da-490f-2f0832af1146",
		"09bdfc2b-a7f0-8c69-e66e-13dfa77a195a",
		"7c9636d2-901e-dead-6194-8d2698ede3fe",
		"a9dd04bb-fef7-8660-2416-a8012688426b",
		"47379b42-f812-1a4d-befb-20d11ef6a202",
		"087a0b0e-534a-5776-c040-9cb51c8eb6c7",
		"c89fbf28-48e8-6872-13c1-4b6b1e3eac16",
		"6ed2e3e0-ff83-585c-ffe6-7fe3fe0cba5b",
		"96d48f59-df87-d066-9ae9-9e55816321b6",
		"d4ac0959-906c-e8b6-c13f-19e8ea6b969d",
		"721f3cd2-ac69-8ebb-8706-eba6f9bb35a2",
		"044925e2-7e6e-efe4-5de9-050d4469cf98",
		"1a8fb61c-8974-42b0-6a26-48a96a9e8f30"
	],
	"folders": [],
	"folders_order": [],
	"timestamp": 1530802264917,
	"owner": "2436859",
	"public": false,
	"events": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3d6c28e0-d1eb-4d5e-9f11-197bcac5bffb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "858d10b4-1304-44e5-89d3-d9efa91367e3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variables": [],
	"auth": null,
	"requests": [
		{
			"id": "0181db3d-5163-861f-8154-7fe05a76158b",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "57dd82f2-e9f1-40db-a767-9cb161fe9e74",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991322046,
			"name": "Verify user Email copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}"
		},
		{
			"id": "044925e2-7e6e-efe4-5de9-050d4469cf98",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/statistic/{{question_id_new_user}}?size=50",
			"queryParams": [
				{
					"key": "size",
					"value": "50",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "7728c46d-3a80-4ccc-9228-723eb91ea379",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"dog\"] = jsonData.tags[0].name === \"dog\";",
							"tests[\"dog_bubble\"] = jsonData.bubbles[0].tag === \"dog\";",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8b3b9830-c88c-409f-9d7a-efc3a25661da",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991517506,
			"name": "REMOVED Check statistic nlp copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"dog\"] = jsonData.tags[0].name === \"dog\";\ntests[\"dog_bubble\"] = jsonData.bubbles[0].tag === \"dog\";\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "08777d4e-f32c-a513-9ef3-ea202e5eb0ef",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/{{answer_id_new_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5d1964ac-6dff-425d-8d51-e94e0a014f96",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var answer_id_new_user = pm.environment.get(\"answer_id_new_user\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"answer_id_new_user\"] = jsonData.id === answer_id_new_user;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b9b4735a-d8f1-48e8-9913-805278976bc2",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988629401,
			"name": "Check created answer on nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar answer_id_new_user = pm.environment.get(\"answer_id_new_user\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"answer_id_new_user\"] = jsonData.id === answer_id_new_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "087a0b0e-534a-5776-c040-9cb51c8eb6c7",
			"headers": "Authorization: Bearer {{admin_access_token}}\nContent-Type: application/json\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"description": "",
					"enabled": true
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/api/answers/change-state",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "aea88582-b650-46d8-96f9-98d0062c21f3",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"var answer_id_old_user = pm.environment.get(\"answer_id_old_user\");",
							"",
							"tests[\"answer_id_old_user\"] = responseBody.has(answer_id_old_user);",
							"tests[\"REMOVED\"] = responseBody.has(\"REMOVED\");",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991492079,
			"name": "Removed answer old user",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\nvar answer_id_old_user = pm.environment.get(\"answer_id_old_user\");\n\ntests[\"answer_id_old_user\"] = responseBody.has(answer_id_old_user);\ntests[\"REMOVED\"] = responseBody.has(\"REMOVED\");\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"ids\": [\"{{answer_id_old_user}}\"], \n\t\"state\": \"REMOVED\"\n}"
		},
		{
			"id": "09bdfc2b-a7f0-8c69-e66e-13dfa77a195a",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "a60f9dcb-5381-475f-90e2-32bd0ca26cc9",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"",
							"tests[\"text\"] = responseBody.has(\"Cats or Dogs?\")",
							"",
							"var question_id_new_user = pm.environment.get(\"question_id_new_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"question_id_new_user\"] = jsonData.data.searchInQuestions.edges[0].node.id === question_id_new_user;"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1532441916085,
			"name": "Search in new question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\n\ntests[\"text\"] = responseBody.has(\"Cats or Dogs?\")\n\nvar question_id_new_user = pm.environment.get(\"question_id_new_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"question_id_new_user\"] = jsonData.data.searchInQuestions.edges[0].node.id === question_id_new_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "\n{\n\t\"query\" : \"query SearchInQuestions {  searchInQuestions(text: \\\"Cats or Dogs?\\\", filter: {types: [ASKED, ANSWERED, REACTED, VIEWED]}) {    edges {     node {        id        text        totalAnswers        newAnswersCount      }    }    totalCount    totalNewAnswersCount  }}\"\n}"
		},
		{
			"id": "106d3a20-e4ba-5e04-e635-64e4e2b15e64",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "fccc686d-ef53-435e-b4cd-3e496849c42f",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 1;",
							"tests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Nope\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991444228,
			"name": "Filter  answers  by tag for old copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 1;\ntests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Nope\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { filterAnswersByTag(questionId: \\\"{{question_id_old_user}}\\\" tag:\\\"no\\\"){   totalCount  edges{      cursor      node{ id text question{id text}}    }  }}\"\n}"
		},
		{
			"id": "167ccaaa-9f0a-15f9-1ebb-bc4a010487f4",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/tags?content=cat&questionId={{question_id_new_user}}",
			"queryParams": [
				{
					"key": "content",
					"value": "cat",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "questionId",
					"value": "{{question_id_new_user}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5cf97efe-c3a0-41eb-876a-7d5ec4fec4a0",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"var question_id_new_user = pm.environment.get(\"question_id_new_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.numberOfElements === 1;",
							"tests[\"number\"] = jsonData.totalElements === 1;",
							"",
							"tests[\"answer1\"] = jsonData.content[0].questionId === question_id_new_user;",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991463526,
			"name": "Check tags on nlp copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\nvar question_id_new_user = pm.environment.get(\"question_id_new_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.numberOfElements === 1;\ntests[\"number\"] = jsonData.totalElements === 1;\n\ntests[\"answer1\"] = jsonData.content[0].questionId === question_id_new_user;\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "1a4e0be0-431f-af2e-6b93-de2cc1956940",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/tags?content=dog&questionId={{question_id_new_user}}",
			"queryParams": [
				{
					"key": "content",
					"value": "dog",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "questionId",
					"value": "{{question_id_new_user}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f6365e7f-cce4-4da3-b3bc-c0d1f4bd98e8",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"var question_id_new_user = pm.environment.get(\"question_id_new_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.numberOfElements === 2;",
							"tests[\"number\"] = jsonData.totalElements === 2;",
							"",
							"tests[\"answer1\"] = jsonData.content[0].questionId === question_id_new_user;",
							"tests[\"answer2\"] = jsonData.content[1].questionId === question_id_new_user;",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991455808,
			"name": "Check tags on nlp copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\nvar question_id_new_user = pm.environment.get(\"question_id_new_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.numberOfElements === 2;\ntests[\"number\"] = jsonData.totalElements === 2;\n\ntests[\"answer1\"] = jsonData.content[0].questionId === question_id_new_user;\ntests[\"answer2\"] = jsonData.content[1].questionId === question_id_new_user;\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "1a8fb61c-8974-42b0-6a26-48a96a9e8f30",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "2e30283a-7d06-4d0f-8e21-df85bf755c4c",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"statistics\"] = responseBody.has(\"statistics\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"dog\"] = jsonData.data.statistics.tags[0].name === \"dog\";",
							"tests[\"dog_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"dog\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d90d7029-da9f-462b-8964-1626b1d949ca",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991521044,
			"name": "View  statistics for new copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"statistics\"] = responseBody.has(\"statistics\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"dog\"] = jsonData.data.statistics.tags[0].name === \"dog\";\ntests[\"dog_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"dog\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { statistics(questionId: \\\"{{question_id_new_user}}\\\" ){  tags{    name     weight   }    bubbles{      tag     entries      pct    }  }}\"\n}"
		},
		{
			"id": "200f2f49-ba7f-1c6f-20a5-6a8c13986f7d",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "67baf30f-7d45-452e-9231-8b97a5aef9d9",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"answer_id_new_user\", jsonData.data.answerQuestion.id);",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f134f3c4-f666-4ca2-9d88-e4103367ca8b",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991393817,
			"name": "Answer  to Question copy copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"answer_id_new_user\", jsonData.data.answerQuestion.id);\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id_new_user}}\\\", text:\\\"Cat\\\") {id text }}\"\n}"
		},
		{
			"id": "21711ff0-38ec-ee42-4025-09203f92b7d5",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5fc888e3-6605-452b-aa40-ddf4307abc31",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"answer_id_old_user\", jsonData.data.answerQuestion.id);",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f134f3c4-f666-4ca2-9d88-e4103367ca8b",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988252253,
			"name": "Answer  to Question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"answer_id_old_user\", jsonData.data.answerQuestion.id);\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id_old_user}}\\\", text:\\\"Yep\\\") {id text }}\"\n}"
		},
		{
			"id": "436b6da1-ec44-eff5-dce9-5963f4611b3d",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3ae3e150-ed43-4b60-8e54-314f69fbfd98",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var user_id = pm.environment.get(\"user_id\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);",
							"if ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991326008,
			"name": "Update User Email copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar user_id = pm.environment.get(\"user_id\");\nvar email = pm.environment.get(\"email_random\");\nvar gender = pm.environment.get(\"gender\");\nvar random = pm.environment.get(\"random\");\nvar userAvatar = pm.environment.get(\"userAvatar\")\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"userId\"] = jsonData.data.updateUser.id === user_id;\ntests[\"email\"] = jsonData.data.updateUser.email === email;\ntests[\"gender\"] = jsonData.data.updateUser.gender === gender;\ntests[\"displayedId\"] = responseBody.has(\"displayedId\");\ntests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);\ntests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";\ntests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);\nif ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
		},
		{
			"id": "46cb376e-a1d7-c2aa-bf6b-f160603c1dbc",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/{{answer_id_old_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "de178b97-a716-4805-8eae-cf3c4fc99424",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var answer_id_old_user = pm.environment.get(\"answer_id_old_user\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"answer_id_old_user\"] = jsonData.id === answer_id_old_user;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b4660909-5ef8-4813-a41e-ec00814ce7e2",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988257779,
			"name": "Check created answer on nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar answer_id_old_user = pm.environment.get(\"answer_id_old_user\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"answer_id_old_user\"] = jsonData.id === answer_id_old_user;\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "47379b42-f812-1a4d-befb-20d11ef6a202",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f568e116-b336-428b-96c1-518b538c3783",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"text\"] = responseBody.has(\"Cats or Dogs?\")",
							"",
							"var question_id_new_user = pm.environment.get(\"question_id_new_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"question_id_new_user\"] = jsonData.data.searchInAnswers.edges[0].node.question.id === question_id_new_user;"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991488293,
			"name": "Search in new answer",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"text\"] = responseBody.has(\"Cats or Dogs?\")\n\nvar question_id_new_user = pm.environment.get(\"question_id_new_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"question_id_new_user\"] = jsonData.data.searchInAnswers.edges[0].node.question.id === question_id_new_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query {  searchInAnswers(questionId:\\\"{{question_id_new_user}}\\\" text: \\\"Dogs\\\"){ edges{node{id text question { id text}} } }}\"\n}"
		},
		{
			"id": "4f6e2023-067c-3f44-c365-3acffb47e157",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/{{answer_id_old_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "09762393-650e-407e-bc94-d4f7fb7b6e30",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var answer_id_old_user = pm.environment.get(\"answer_id_old_user\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"answer_id_old_user\"] = jsonData.id === answer_id_old_user;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e468573e-23ba-4a63-ac4e-a7f4ea2dae53",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991389543,
			"name": "Check created answer on nlp copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar answer_id_old_user = pm.environment.get(\"answer_id_old_user\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"answer_id_old_user\"] = jsonData.id === answer_id_old_user;\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "500c6e70-7381-1974-04f3-c959f098adca",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"folder": null,
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "caa53ca5-5196-40f4-8d48-cbe1509da7c0",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var user_id = pm.environment.get(\"user_id_new\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);",
							"if ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988221978,
			"name": "Update User Email",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar user_id = pm.environment.get(\"user_id_new\");\nvar email = pm.environment.get(\"email_random\");\nvar gender = pm.environment.get(\"gender\");\nvar random = pm.environment.get(\"random\");\nvar userAvatar = pm.environment.get(\"userAvatar\")\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"userId\"] = jsonData.data.updateUser.id === user_id;\ntests[\"email\"] = jsonData.data.updateUser.email === email;\ntests[\"gender\"] = jsonData.data.updateUser.gender === gender;\ntests[\"displayedId\"] = responseBody.has(\"displayedId\");\ntests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);\ntests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";\ntests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);\nif ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
		},
		{
			"id": "58ffc440-acfa-9132-e8a8-a0d86e1d16d4",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "81ef8af5-2ff2-414c-ac85-5bfa84daef99",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if (tests[\"response code\"] !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991315732,
			"name": "SignIUp with email ME copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);\ntests[\"response code\"] = responseCode.code === 200;\nif (tests[\"response code\"] !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"query User { user {id }}\"\n}"
		},
		{
			"id": "5e3ddc8e-99ed-d5be-aed1-b6cc9b40067b",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "50a9f8c3-71b6-4fd0-b3f1-6de16210c5d6",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if (tests[\"response code\"] !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988240147,
			"name": "SignIUp with email ME copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);\ntests[\"response code\"] = responseCode.code === 200;\nif (tests[\"response code\"] !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"query User { user {id }}\"\n}"
		},
		{
			"id": "67afbbdc-17a8-a612-c332-fa946bc6b0bc",
			"headers": "Authorization: Bearer {{admin_access_token}}\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/api/user?userId={{user_id}}",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"auth": null,
			"time": 1531227353655,
			"name": "getUser code copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"response code\"] = responseCode.code === 200;\npostman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);\nif (tests[\"response code\"] !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "693f7780-c95a-3252-dad8-81a8673239ec",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "293ad6e2-8244-44fc-93b5-220a12dc7c70",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"answer_id_old_user\", jsonData.data.answerQuestion.id);",
							"",
							"var id = Number(pm.environment.get(\"question_id_old_user\"));",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"id\"] = responseBody.has(\"id\")",
							"if ((tests[\"response code\"] && tests[\"answer_text\"] && tests[\"id\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f134f3c4-f666-4ca2-9d88-e4103367ca8b",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991385435,
			"name": "Answer  to Question copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"answer_id_old_user\", jsonData.data.answerQuestion.id);\n\nvar id = Number(pm.environment.get(\"question_id_old_user\"));\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"id\"] = responseBody.has(\"id\")\nif ((tests[\"response code\"] && tests[\"answer_text\"] && tests[\"id\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id_old_user}}\\\", text:\\\"Nope\\\") {id text }}\"\n}"
		},
		{
			"id": "6ad6f6d9-6710-bd9d-7d5b-7b36744bf2ee",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/{{answer_id_new_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "77065052-d9cc-40e8-b03b-5eb6d53d2840",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var answer_id_new_user = pm.environment.get(\"answer_id_new_user\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"answer_id_new_user\"] = jsonData.id === answer_id_new_user;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2ec1cb7a-ebea-4330-accc-354c88551fb0",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991397860,
			"name": "Check created answer on nlp copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar answer_id_new_user = pm.environment.get(\"answer_id_new_user\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"answer_id_new_user\"] = jsonData.id === answer_id_new_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "6ed2e3e0-ff83-585c-ffe6-7fe3fe0cba5b",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/statistic/{{question_id_old_user}}?size=50",
			"queryParams": [
				{
					"key": "size",
					"value": "50",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "171dd5d8-53ec-4907-be0d-ab382bdd2ef8",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"dog\"] = jsonData.tags[0].name === \"yes\";",
							"tests[\"dog_bubble\"] = jsonData.bubbles[0].tag === \"yes\";",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3739065f-603d-4760-85c5-ea6d855d18c0",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991500777,
			"name": "REMOVED Check statistic nlp old",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"dog\"] = jsonData.tags[0].name === \"yes\";\ntests[\"dog_bubble\"] = jsonData.bubbles[0].tag === \"yes\";\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "704c8a66-24be-0617-1e31-8b93c51022e7",
			"name": "Verify user Email copy copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"method": "POST",
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b6d94761-c266-41f2-bc94-ad8a63d19d53",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}",
			"pathVariables": {},
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"responses": [],
			"pathVariableData": [],
			"queryParams": [],
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}"
				}
			],
			"auth": null,
			"collection_id": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"isFromCollection": true,
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\n\ntests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "71f926d9-f9b5-5686-6b62-873089ccc176",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "4e70acfd-f30a-4abd-81b1-6ca680052610",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"statistics\"] = responseBody.has(\"statistics\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"dog\"] = jsonData.data.statistics.tags[0].name === \"dog\";",
							"tests[\"cat\"] = jsonData.data.statistics.tags[1].name === \"cat\";",
							"tests[\"dog_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"dog\";",
							"tests[\"cat_bubble\"] = jsonData.data.statistics.bubbles[1].tag === \"cat\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991427950,
			"name": "View  statistics for new",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"statistics\"] = responseBody.has(\"statistics\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"dog\"] = jsonData.data.statistics.tags[0].name === \"dog\";\ntests[\"cat\"] = jsonData.data.statistics.tags[1].name === \"cat\";\ntests[\"dog_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"dog\";\ntests[\"cat_bubble\"] = jsonData.data.statistics.bubbles[1].tag === \"cat\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { statistics(questionId: \\\"{{question_id_new_user}}\\\" ){  tags{    name     weight   }    bubbles{      tag     entries      pct    }  }}\"\n}"
		},
		{
			"id": "721f3cd2-ac69-8ebb-8706-eba6f9bb35a2",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "24460067-f531-47c4-8182-6df4c7805ab8",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 0;",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991513761,
			"name": "REMOVED Filter  answers  by tag for new",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 0;\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { filterAnswersByTag(questionId: \\\"{{question_id_new_user}}\\\" tag:\\\"cat\\\"){   totalCount  edges{      cursor      node{ id text question{id text}}    }  }}\"\n}"
		},
		{
			"id": "759af4e9-cf67-3f6c-3f47-f8091393f824",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "69901a9e-6e5f-4d7d-9d6c-1157df58ee1f",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "64bc80aa-aeb2-47db-89d3-86c2189eab4e",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991311893,
			"name": "SignIUp with email copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\nemail_random = \"sandbxtest8+\" + random + \"@gmail.com\"\npostman.setEnvironmentVariable(\"random\", random);\npostman.setEnvironmentVariable(\"email_random\", email_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);\ntests[\"Body matches string\"] = responseBody.has(\"access_token\");\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
		},
		{
			"id": "772c5a7e-48d9-de0b-07a6-ba01a1cbc7f8",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8c77c133-0ecf-4695-ac75-40c4d9df93a6",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"answer_id_new_user\", jsonData.data.answerQuestion.id);",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f134f3c4-f666-4ca2-9d88-e4103367ca8b",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991365421,
			"name": "Answer  to Question copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"answer_id_new_user\", jsonData.data.answerQuestion.id);\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id_new_user}}\\\", text:\\\"Dogs\\\") {id text }}\"\n}"
		},
		{
			"id": "772de700-f29d-2aee-7468-bfa53d3d32c6",
			"headers": "Authorization: Bearer {{admin_access_token}}\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/api/user?userId={{user_id}}",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"auth": null,
			"time": 1531227347131,
			"name": "getUser code copy copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"response code\"] = responseCode.code === 200;\npostman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);\nif (tests[\"response code\"] !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "7917cde1-9460-ce10-24b6-e7c5396a7391",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5112ae3e-a8ef-48d4-98fe-5ff51f9fa809",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if (tests[\"response code\"] !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991379992,
			"name": "SignIUp with email ME copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);\ntests[\"response code\"] = responseCode.code === 200;\nif (tests[\"response code\"] !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"query User { user {id }}\"\n}"
		},
		{
			"id": "7a58520b-55c2-e376-7dae-513811f30bb4",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/statistic/{{question_id_new_user}}?size=50",
			"queryParams": [
				{
					"key": "size",
					"value": "50",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "840a2f6a-96cf-4eb6-bee5-6afe2547e32c",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"dog\"] = jsonData.tags[0].name === \"dog\";",
							"tests[\"cat\"] = jsonData.tags[1].name === \"cat\";",
							"tests[\"dog_bubble\"] = jsonData.bubbles[0].tag === \"dog\";",
							"tests[\"cat_bubble\"] = jsonData.bubbles[1].tag === \"cat\";"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991432397,
			"name": "Check statistic nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"dog\"] = jsonData.tags[0].name === \"dog\";\ntests[\"cat\"] = jsonData.tags[1].name === \"cat\";\ntests[\"dog_bubble\"] = jsonData.bubbles[0].tag === \"dog\";\ntests[\"cat_bubble\"] = jsonData.bubbles[1].tag === \"cat\";",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "7c9636d2-901e-dead-6194-8d2698ede3fe",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/questions?userId={{user_id_new}}&content=Cats or Dogs?\n",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id_new}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "content",
					"value": "Cats or Dogs?\n",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "4dbb3288-36d4-46f2-b25a-01bde6e24171",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"numberOfElements\"] = jsonData.numberOfElements > 0;",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991480439,
			"name": "Search in new question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"numberOfElements\"] = jsonData.numberOfElements > 0;\n\n\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "7da504c0-032d-c2c9-87de-acbafd49d43d",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/{{answer_id_old_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "681eef51-0ecd-4a99-bd11-ecd2ac1c34cf",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var answer_id_old_user = pm.environment.get(\"answer_id_old_user\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"answer_id_old_user\"] = jsonData.id === answer_id_old_user;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b4592884-6458-46d0-be43-f1114b79af97",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991361055,
			"name": "Check created answer on nlp copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar answer_id_old_user = pm.environment.get(\"answer_id_old_user\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"answer_id_old_user\"] = jsonData.id === answer_id_old_user;\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "7dfbf073-da4a-af31-7caa-8e04205a743d",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f7067631-0c96-4e8c-a7c2-b7351d25486d",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "64bc80aa-aeb2-47db-89d3-86c2189eab4e",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988205411,
			"name": "SignIUp with email",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\nemail_random = \"sandbxtest8+\" + random + \"@gmail.com\"\npostman.setEnvironmentVariable(\"random\", random);\npostman.setEnvironmentVariable(\"email_random\", email_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);\ntests[\"Body matches string\"] = responseBody.has(\"access_token\");\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
		},
		{
			"id": "84d4d68a-a9e2-d28c-62e5-1c8280ad50ba",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/{{answer_id_new_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0c1400b5-e88c-427c-ae78-fb17028b81fe",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var answer_id_new_user = pm.environment.get(\"answer_id_new_user\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"answer_id_new_user\"] = jsonData.id === answer_id_new_user;"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6d123168-bb02-4136-acf4-d1f7cde1ab6f",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991370315,
			"name": "Check created answer on nlp copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar answer_id_new_user = pm.environment.get(\"answer_id_new_user\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"answer_id_new_user\"] = jsonData.id === answer_id_new_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "877ca2ca-bdb7-b06a-261a-b38e0b70f140",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "1224ccdb-8acf-4fb4-bfe4-586c21cd42da",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"user_id_new\", jsonData.data.user.id);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if (tests[\"response code\"] !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988210071,
			"name": "Get user id",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"user_id_new\", jsonData.data.user.id);\ntests[\"response code\"] = responseCode.code === 200;\nif (tests[\"response code\"] !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"query User { user {id }}\"\n}"
		},
		{
			"id": "8a50c0ed-d8ee-e8df-b6ab-f8e1be3c6267",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/questions/{{question_id_new_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "49d4f238-d945-4d64-8466-02fe8ef7bd02",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var question_id_new_user = pm.environment.get(\"question_id_new_user\");",
							"var question_text = pm.environment.get(\"question_text\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"questionId\"] = jsonData.id === question_id_new_user;",
							"tests[\"questionText\"] = jsonData.content === question_text;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "fbf119ac-cc9f-42d4-9d2e-dbf956144ae2",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531992017024,
			"name": "Check created question on nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar question_id_new_user = pm.environment.get(\"question_id_new_user\");\nvar question_text = pm.environment.get(\"question_text\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"questionId\"] = jsonData.id === question_id_new_user;\ntests[\"questionText\"] = jsonData.content === question_text;\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "955f9e7c-0140-cf1f-663c-c02fc1f69171",
			"headers": "Content-Type: application/x-www-form-urlencoded\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/x-www-form-urlencoded",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/login",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b1277a7c-3cc6-446e-849a-216caceb047f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"key": "emailOrPhone",
					"value": "{{admin_email}}",
					"description": "",
					"type": "text",
					"enabled": true
				},
				{
					"key": "password",
					"value": "{{admin_password}}",
					"description": "",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "urlencoded",
			"auth": null,
			"time": 1531227430855,
			"name": "ADMIN Login",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": null,
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "96d48f59-df87-d066-9ae9-9e55816321b6",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"folder": null,
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c60edc7d-99c3-4edf-8bf9-a371114a3cae",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"statistics\"] = responseBody.has(\"statistics\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"yes\"] = jsonData.data.statistics.tags[0].name === \"yes\";",
							"tests[\"yes_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"yes\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c6980499-39b0-4e94-8663-0e3f3b95e84e",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991506471,
			"name": "View  statistics for old copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"statistics\"] = responseBody.has(\"statistics\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"yes\"] = jsonData.data.statistics.tags[0].name === \"yes\";\ntests[\"yes_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"yes\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { statistics(questionId: \\\"{{question_id_old_user}}\\\" ){  tags{    name     weight   }    bubbles{      tag     entries      pct    }  }}\"\n}"
		},
		{
			"id": "9a3efe77-8079-2636-c3fa-26d381ddc6d3",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8a6f146a-65e2-48a5-8f69-fcc68c51b30c",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "64bc80aa-aeb2-47db-89d3-86c2189eab4e",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988236200,
			"name": "SignIUp with email copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\nemail_random = \"sandbxtest8+\" + random + \"@gmail.com\"\npostman.setEnvironmentVariable(\"random\", random);\npostman.setEnvironmentVariable(\"email_random\", email_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);\ntests[\"Body matches string\"] = responseBody.has(\"access_token\");\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
		},
		{
			"id": "9bf4e87d-3d65-98ec-d238-2fa81e595143",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/tags?content=yes&questionId={{question_id_old_user}}",
			"queryParams": [
				{
					"key": "content",
					"value": "yes",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "questionId",
					"value": "{{question_id_old_user}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9a0b9d44-7561-4a26-804e-95f23b0d6655",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"var question_id_old_user = pm.environment.get(\"question_id_old_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.numberOfElements === 2;",
							"tests[\"number\"] = jsonData.totalElements === 2;",
							"",
							"tests[\"answer1\"] = jsonData.content[0].questionId === question_id_old_user;",
							"tests[\"answer2\"] = jsonData.content[1].questionId === question_id_old_user;",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991440773,
			"name": "Check tags on nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\nvar question_id_old_user = pm.environment.get(\"question_id_old_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.numberOfElements === 2;\ntests[\"number\"] = jsonData.totalElements === 2;\n\ntests[\"answer1\"] = jsonData.content[0].questionId === question_id_old_user;\ntests[\"answer2\"] = jsonData.content[1].questionId === question_id_old_user;\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "9c851005-8366-5d55-2483-42e19231d842",
			"headers": "Authorization: Bearer {{admin_access_token}}\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/api/user?userId={{user_id_new}}",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id_new}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"auth": null,
			"time": 1531228582729,
			"name": "getUser code",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"response code\"] = responseCode.code === 200;\npostman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);\nif (tests[\"response code\"] !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "9e0bc662-3d27-8df2-5b02-699444d55170",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "41059c5f-2025-411e-8ce5-40383b6e17fa",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"answer_id_old_user\", jsonData.data.answerQuestion.id);",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f134f3c4-f666-4ca2-9d88-e4103367ca8b",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991330843,
			"name": "Answer  to Question copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"answer_id_old_user\", jsonData.data.answerQuestion.id);\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id_old_user}}\\\", text:\\\"Yeah\\\") {id text }}\"\n}"
		},
		{
			"id": "a3fafe44-2eb1-2a2e-8017-5c8124f40e87",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/answers/tags?content=no&questionId={{question_id_old_user}}",
			"queryParams": [
				{
					"key": "content",
					"value": "no",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "questionId",
					"value": "{{question_id_old_user}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e8ff4528-6930-4546-a91f-19b158ba8239",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"var question_id_old_user = pm.environment.get(\"question_id_old_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.numberOfElements === 1;",
							"tests[\"number\"] = jsonData.totalElements === 1;",
							"",
							"tests[\"answer1\"] = jsonData.content[0].questionId === question_id_old_user;",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991447825,
			"name": "Check tags on nlp copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\nvar question_id_old_user = pm.environment.get(\"question_id_old_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.numberOfElements === 1;\ntests[\"number\"] = jsonData.totalElements === 1;\n\ntests[\"answer1\"] = jsonData.content[0].questionId === question_id_old_user;\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "a418fec8-46cc-694f-6161-1d0fed8a54c4",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5c3da46d-61f3-4eb9-b6a2-295662a89fc5",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"question_id_new_user\", jsonData.data.askQuestion.id);",
							"postman.setEnvironmentVariable(\"question_text\", jsonData.data.askQuestion.text);",
							"postman.setEnvironmentVariable(\"createdAt\", jsonData.data.askQuestion.createdAt);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"id\");",
							"if ((tests[\"response code\"] && tests[\"Body matches string\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c7c6cf58-c79c-4912-a43a-2a50fb650b40",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"postman.setEnvironmentVariable(\"random\", random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988225855,
			"name": "ASK Question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\npostman.setEnvironmentVariable(\"random\", random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"question_id_new_user\", jsonData.data.askQuestion.id);\npostman.setEnvironmentVariable(\"question_text\", jsonData.data.askQuestion.text);\npostman.setEnvironmentVariable(\"createdAt\", jsonData.data.askQuestion.createdAt);\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"id\");\nif ((tests[\"response code\"] && tests[\"Body matches string\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation ask{askQuestion (text:\\\"Cats or Dogs?\\\"){id text createdAt}  }\"\n}"
		},
		{
			"id": "a7ebc6a5-5c18-989a-e3e3-98c1af913694",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c82487fa-5494-4a65-944d-d0e3de3c7aad",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 2;",
							"tests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Yeah\";",
							"tests[\"text2\"] = jsonData.data.filterAnswersByTag.edges[1].node.text === \"Yep\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991436731,
			"name": "Filter  answers  by tag for old",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 2;\ntests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Yeah\";\ntests[\"text2\"] = jsonData.data.filterAnswersByTag.edges[1].node.text === \"Yep\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { filterAnswersByTag(questionId: \\\"{{question_id_old_user}}\\\" tag:\\\"yes\\\"){   totalCount  edges{      cursor      node{ id text question{id text}}    }  }}\"\n}"
		},
		{
			"id": "a9dd04bb-fef7-8660-2416-a8012688426b",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "498c9d20-4529-421d-8f58-3491d457d6c6",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"text\"] = responseBody.has(\"Do you like Dogs?\")",
							"",
							"var question_id_old_user = pm.environment.get(\"question_id_old_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"question_id_old_user\"] = jsonData.data.searchInAnswers.edges[0].node.question.id === question_id_old_user;"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991484192,
			"name": "Search in old answer",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"text\"] = responseBody.has(\"Do you like Dogs?\")\n\nvar question_id_old_user = pm.environment.get(\"question_id_old_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"question_id_old_user\"] = jsonData.data.searchInAnswers.edges[0].node.question.id === question_id_old_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query {  searchInAnswers(questionId:\\\"{{question_id_old_user}}\\\" text: \\\"Yep\\\"){ edges{node{id text question { id text}} } }}\"\n}"
		},
		{
			"id": "addbe965-2192-90a7-78ab-aa4f4f4a69fd",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c0be61ed-3727-46b5-85b3-615cdf3b089f",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"user_id_old\", jsonData.data.user.id);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"",
							"",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531907170167,
			"name": "Get user id",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"user_id_old\", jsonData.data.user.id);\ntests[\"response code\"] = responseCode.code === 200;\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"query User { user {id }}\"\n}"
		},
		{
			"id": "b3587295-3546-5046-eb50-4d1ccdfef644",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "93c134e6-e21b-4bd8-86e3-3712547bec31",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 1;",
							"tests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Cat\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991460117,
			"name": "Filter  answers  by tag for new copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 1;\ntests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Cat\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { filterAnswersByTag(questionId: \\\"{{question_id_new_user}}\\\" tag:\\\"cat\\\"){   totalCount  edges{      cursor      node{ id text question{id text}}    }  }}\"\n}"
		},
		{
			"id": "b453ead8-4775-1397-61d4-41fad3205392",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b64f1567-9632-4c4a-8700-21eaa98e2548",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"statistics\"] = responseBody.has(\"statistics\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"yes\"] = jsonData.data.statistics.tags[0].name === \"yes\";",
							"tests[\"no\"] = jsonData.data.statistics.tags[1].name === \"no\";",
							"tests[\"yes_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"yes\";",
							"tests[\"no_bubble\"] = jsonData.data.statistics.bubbles[1].tag === \"no\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991413439,
			"name": "View  statistics for old",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"statistics\"] = responseBody.has(\"statistics\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"yes\"] = jsonData.data.statistics.tags[0].name === \"yes\";\ntests[\"no\"] = jsonData.data.statistics.tags[1].name === \"no\";\ntests[\"yes_bubble\"] = jsonData.data.statistics.bubbles[0].tag === \"yes\";\ntests[\"no_bubble\"] = jsonData.data.statistics.bubbles[1].tag === \"no\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { statistics(questionId: \\\"{{question_id_old_user}}\\\" ){  tags{    name     weight   }    bubbles{      tag     entries      pct    }  }}\"\n}"
		},
		{
			"id": "b59b7bbc-ea23-0698-5004-67599eb175d6",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"folder": null,
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3c10c470-e5a9-4ef8-8b9c-ff1cca617c3d",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.data.signin.access_token);",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988152343,
			"name": "Login",
			"description": null,
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"access_token\", jsonData.data.signin.access_token);\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n  \"query\":\"mutation {signin(emailOrPhone:\\\"sandbxtest8+77@gmail.com\\\", password:\\\"TestTest12\\\") {access_token}}\"\n}"
		},
		{
			"id": "b60fe73d-c229-3874-55ce-fcb03bf6088c",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c801360c-a8da-4dfa-8313-78c965bf97d0",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"text\"] = responseBody.has(\"Do you like Dogs?\")",
							"",
							"var question_id_old_user = pm.environment.get(\"question_id_old_user\");",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"question_id_old_user\"] = jsonData.data.searchInQuestions.edges[0].node.id === question_id_old_user;"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1532441899956,
			"name": "Search in old question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"text\"] = responseBody.has(\"Do you like Dogs?\")\n\nvar question_id_old_user = pm.environment.get(\"question_id_old_user\");\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"question_id_old_user\"] = jsonData.data.searchInQuestions.edges[0].node.id === question_id_old_user;",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query SearchInQuestions {  searchInQuestions(text: \\\"Do you like Dogs?\\\", filter: {types: [ASKED, ANSWERED, REACTED, VIEWED]}) {    edges {     node {        id        text        totalAnswers        newAnswersCount      }    }    totalCount    totalNewAnswersCount  }}\"\n}"
		},
		{
			"id": "b8c0cf83-4465-7dd7-c6a7-2ddd4f55d82e",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "68cb8bc2-4d83-4038-8d10-0e232f9783a4",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "64bc80aa-aeb2-47db-89d3-86c2189eab4e",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991374057,
			"name": "SignIUp with email copy copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\nemail_random = \"sandbxtest8+\" + random + \"@gmail.com\"\npostman.setEnvironmentVariable(\"random\", random);\npostman.setEnvironmentVariable(\"email_random\", email_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);\ntests[\"Body matches string\"] = responseBody.has(\"access_token\");\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests['Body matches string'] && tests[\"response code\"]) !==true ) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
		},
		{
			"id": "ba37d982-eb54-50b7-6cdc-93b46acb2ab4",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9008deef-98fd-4cb8-832b-a5d203ae66ee",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var user_id = pm.environment.get(\"user_id\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);",
							"if ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988248853,
			"name": "Update User Email copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar user_id = pm.environment.get(\"user_id\");\nvar email = pm.environment.get(\"email_random\");\nvar gender = pm.environment.get(\"gender\");\nvar random = pm.environment.get(\"random\");\nvar userAvatar = pm.environment.get(\"userAvatar\")\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"userId\"] = jsonData.data.updateUser.id === user_id;\ntests[\"email\"] = jsonData.data.updateUser.email === email;\ntests[\"gender\"] = jsonData.data.updateUser.gender === gender;\ntests[\"displayedId\"] = responseBody.has(\"displayedId\");\ntests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);\ntests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";\ntests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);\nif ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
		},
		{
			"id": "bd93a233-972e-c78b-ebaf-e069fbfe38ec",
			"headers": "Authorization: Bearer {{admin_access_token}}\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/api/user?userId={{user_id}}",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"auth": null,
			"time": 1531227340147,
			"name": "getUser code copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"response code\"] = responseCode.code === 200;\npostman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);\nif (tests[\"response code\"] !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "bf0a7e60-8163-56b2-ed08-db2fbc3898fd",
			"name": "Update User Email copy copy copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"method": "POST",
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "4896bdc7-2550-4f0b-af5a-c009cc839b91",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var user_id = pm.environment.get(\"user_id\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);",
							"if ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}",
			"pathVariables": {},
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"responses": [],
			"pathVariableData": [],
			"queryParams": [],
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}"
				}
			],
			"auth": null,
			"collection_id": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"isFromCollection": true,
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar user_id = pm.environment.get(\"user_id\");\nvar email = pm.environment.get(\"email_random\");\nvar gender = pm.environment.get(\"gender\");\nvar random = pm.environment.get(\"random\");\nvar userAvatar = pm.environment.get(\"userAvatar\")\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"userId\"] = jsonData.data.updateUser.id === user_id;\ntests[\"email\"] = jsonData.data.updateUser.email === email;\ntests[\"gender\"] = jsonData.data.updateUser.gender === gender;\ntests[\"displayedId\"] = responseBody.has(\"displayedId\");\ntests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);\ntests[\"state\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";\ntests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);\nif ((tests[\"response code\"] && tests[\"userId\"] && tests[\"email\"] && tests[\"gender\"] && tests[\"displayedId\"] && tests[\"birthday\"] && tests[\"state\"] && tests[\"avatar_id\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "c16016e0-3523-e4ff-6763-ed54a111c7f4",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "21de1245-bd05-4ab4-a7ce-221e8d63a139",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"question_id_old_user\", jsonData.data.askQuestion.id);",
							"postman.setEnvironmentVariable(\"question_text\", jsonData.data.askQuestion.text);",
							"postman.setEnvironmentVariable(\"createdAt\", jsonData.data.askQuestion.createdAt);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"Body matches string\"] = responseBody.has(\"id\");",
							"if ((tests[\"response code\"] && tests[\"Body matches string\"] ) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c7c6cf58-c79c-4912-a43a-2a50fb650b40",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"postman.setEnvironmentVariable(\"random\", random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988161243,
			"name": "ASK Question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\npostman.setEnvironmentVariable(\"random\", random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"question_id_old_user\", jsonData.data.askQuestion.id);\npostman.setEnvironmentVariable(\"question_text\", jsonData.data.askQuestion.text);\npostman.setEnvironmentVariable(\"createdAt\", jsonData.data.askQuestion.createdAt);\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"Body matches string\"] = responseBody.has(\"id\");\nif ((tests[\"response code\"] && tests[\"Body matches string\"] ) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation ask{askQuestion (text:\\\"Do you like Dogs?\\\"){id text createdAt}  }\"\n}"
		},
		{
			"id": "c45aa2b7-6f62-55a3-0fd9-5ebeac50e306",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "aecb1622-73be-41ed-90e8-933e70395cf9",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988217508,
			"name": "Verify user Email",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\n\ntests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}"
		},
		{
			"id": "c4cbda85-f101-2900-39b7-d0b553ee8b17",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/statistic/{{question_id_old_user}}?size=50",
			"queryParams": [
				{
					"key": "size",
					"value": "50",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "63582156-0c9a-4cfe-b05a-e0dbb2245359",
						"type": "text/javascript",
						"exec": [
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"tags\"] = responseBody.has(\"tags\")",
							"tests[\"bubbles\"] = responseBody.has(\"bubbles\")",
							"tests[\"name\"] = responseBody.has(\"name\")",
							"tests[\"weight\"] = responseBody.has(\"weight\")",
							"tests[\"tag\"] = responseBody.has(\"tag\")",
							"tests[\"entries\"] = responseBody.has(\"entries\")",
							"tests[\"pct\"] = responseBody.has(\"pct\")",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"yes\"] = jsonData.tags[0].name === \"yes\";",
							"tests[\"no\"] = jsonData.tags[1].name === \"no\";",
							"tests[\"yes_bubble\"] = jsonData.bubbles[0].tag === \"yes\";",
							"tests[\"no_bubble\"] = jsonData.bubbles[1].tag === \"no\";"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991423318,
			"name": "Check statistic nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "tests[\"response code\"] = responseCode.code === 200;\ntests[\"tags\"] = responseBody.has(\"tags\")\ntests[\"bubbles\"] = responseBody.has(\"bubbles\")\ntests[\"name\"] = responseBody.has(\"name\")\ntests[\"weight\"] = responseBody.has(\"weight\")\ntests[\"tag\"] = responseBody.has(\"tag\")\ntests[\"entries\"] = responseBody.has(\"entries\")\ntests[\"pct\"] = responseBody.has(\"pct\")\n\nvar jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"yes\"] = jsonData.tags[0].name === \"yes\";\ntests[\"no\"] = jsonData.tags[1].name === \"no\";\ntests[\"yes_bubble\"] = jsonData.bubbles[0].tag === \"yes\";\ntests[\"no_bubble\"] = jsonData.bubbles[1].tag === \"no\";",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "c6dec5c9-d0a0-93b6-fc33-a2d03080ea64",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b0b963fb-6432-49e2-ace9-203df27d5eff",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 2;",
							"tests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Dogs\";",
							"tests[\"text2\"] = jsonData.data.filterAnswersByTag.edges[1].node.text === \"Dog\";",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991452327,
			"name": "Filter  answers  by tag for new",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 2;\ntests[\"text1\"] = jsonData.data.filterAnswersByTag.edges[0].node.text === \"Dogs\";\ntests[\"text2\"] = jsonData.data.filterAnswersByTag.edges[1].node.text === \"Dog\";\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { filterAnswersByTag(questionId: \\\"{{question_id_new_user}}\\\" tag:\\\"dog\\\"){   totalCount  edges{      cursor      node{ id text question{id text}}    }  }}\"\n}"
		},
		{
			"id": "c7ea2cff-52c6-a622-d2ff-57cccac9b2f0",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/questions/{{question_id_old_user}}",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "98298c12-8746-4284-82ae-3f2f00483351",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"var question_id_old_user = pm.environment.get(\"question_id_old_user\");",
							"var question_text = pm.environment.get(\"question_text\");",
							"",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"questionId\"] = jsonData.id === question_id_old_user;",
							"tests[\"questionText\"] = jsonData.content === question_text;",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a2b0389f-c54c-4623-8c2b-8ba4ea053fc1",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 2000);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531992030885,
			"name": "Check created question on nlp",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "setTimeout(function(){}, 2000);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\nvar question_id_old_user = pm.environment.get(\"question_id_old_user\");\nvar question_text = pm.environment.get(\"question_text\");\n\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"questionId\"] = jsonData.id === question_id_old_user;\ntests[\"questionText\"] = jsonData.content === question_text;\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "c89fbf28-48e8-6872-13c1-4b6b1e3eac16",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3460bfc7-1ab2-4219-91b0-b176c58e3681",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 0;",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d0f4832c-21eb-4b9a-94e0-f4e0b82105ca",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991495450,
			"name": "REMOVED Filter  answers  by tag for old",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend ,milk ,Dima ,Alina ,iPad ,Basilur ,KFC ,PlayStation ,Love ,USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<5; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"total_count\"] = jsonData.data.filterAnswersByTag.totalCount === 0;\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"query { filterAnswersByTag(questionId: \\\"{{question_id_old_user}}\\\" tag:\\\"no\\\"){   totalCount  edges{      cursor      node{ id text question{id text}}    }  }}\"\n}"
		},
		{
			"id": "d4ac0959-906c-e8b6-c13f-19e8ea6b969d",
			"headers": "Authorization: Bearer {{admin_access_token}}\nContent-Type: application/json\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"description": "",
					"enabled": true
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{admin_server}}{{admin_port}}/admin/api/answers/change-state",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "bc38aed1-95fc-4b09-a6af-a316db95d95d",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"var answer_id_new_user = pm.environment.get(\"answer_id_new_user\");",
							"",
							"tests[\"answer_id_new_user\"] = responseBody.has(answer_id_new_user);",
							"tests[\"REMOVED\"] = responseBody.has(\"REMOVED\");",
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991510333,
			"name": "Removed answer new user",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\nvar answer_id_new_user = pm.environment.get(\"answer_id_new_user\");\n\ntests[\"answer_id_new_user\"] = responseBody.has(answer_id_new_user);\ntests[\"REMOVED\"] = responseBody.has(\"REMOVED\");\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"ids\": [\"{{answer_id_new_user}}\"], \n\t\"state\": \"REMOVED\"\n}"
		},
		{
			"id": "dd3a417a-e9d5-56da-490f-2f0832af1146",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{admin_protocol}}://{{elastic_server}}/nlp/questions?userId={{user_id_old}}&content=Do you like Dogs?\n",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id_old}}",
					"equals": true,
					"description": "",
					"enabled": true
				},
				{
					"key": "content",
					"value": "Do you like Dogs?\n",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "fdc1c9cf-8e90-49bb-9ac7-6ec3e1daa65a",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"response code\"] = responseCode.code === 200;",
							"tests[\"numberOfElements\"] = jsonData.numberOfElements > 0;",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531991472047,
			"name": "Search in old question",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar >= 6) {\n    gender = \"MALE\"\n} else {\n    gender = \"FEMALE\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"response code\"] = responseCode.code === 200;\ntests[\"numberOfElements\"] = jsonData.numberOfElements > 0;\n\n\n\n\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": ""
		},
		{
			"id": "e466b220-2d48-b3f1-f785-99e4735b1e13",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "43572ed6-ab92-4e9d-a5d1-7109c4e83b3d",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"postman.setEnvironmentVariable(\"answer_id_new_user\", jsonData.data.answerQuestion.id);",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f134f3c4-f666-4ca2-9d88-e4103367ca8b",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988262577,
			"name": "Answer  to Question copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days,Don't know,Yes,No,Maybe,Big Mac - one love,Getting married to a,They rock,I wish I know,My boyfriend,Go to the beach,Coca cola,It's not me,Chinese food\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\npostman.setEnvironmentVariable(\"answer_id_new_user\", jsonData.data.answerQuestion.id);\n\n\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id_new_user}}\\\", text:\\\"Dog\\\") {id text }}\"\n}"
		},
		{
			"id": "ea4d839e-bbfd-6e74-0e52-28f3b8824177",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "47deca70-cfd4-4f6f-b9d1-42e0e03be081",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log( \"response body: \" ,  responseBody)",
							"console.log(\"request: \" ,  request)",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"tests[\"response code\"] = responseCode.code === 200;",
							"if ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1531988245240,
			"name": "Verify user Email copy",
			"collectionId": "255c25b6-db9f-9447-5986-bd7efcb8190c",
			"responses": [],
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\nconsole.log( \"response body: \" ,  responseBody)\nconsole.log(\"request: \" ,  request)\n\ntests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";\ntests[\"response code\"] = responseCode.code === 200;\nif ((tests[\"response code\"] && tests[\"VERIFIED\"]) !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}"
		}
	]
}