{
	"id": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
	"name": "N(DG) Add answers random words",
	"description": "",
	"order": [
		"c7c5954e-fc8d-cdc9-449d-a5f2b6ce619e",
		"eae28470-54a1-9e48-e046-110f03f0221b",
		"ba96f1a1-9ef9-052d-3267-070bac5f6015",
		"ade0f166-d080-3bc5-17c4-24f0a5047b07",
		"f2a9445f-faf3-5508-f028-ee34f92ea552",
		"11baa660-d1b4-e678-92c3-a37373326f3c",
		"123a6019-c635-1d43-26ed-67f89358f343"
	],
	"folders": [],
	"folders_order": [],
	"timestamp": 0,
	"owner": "2436859",
	"public": false,
	"events": [],
	"variables": [],
	"auth": null,
	"requests": [
		{
			"id": "11baa660-d1b4-e678-92c3-a37373326f3c",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"folder": null,
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9e6b99b3-0c6a-4765-aaf9-aa01aac340c7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var user_id = pm.environment.get(\"user_id\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"gender\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e234da5e-a6cd-46bb-a1aa-b0bd8c81dbbc",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar < 3) {",
							"    gender = \"MALE\"",
							"} else if (userAvatar < 6){",
							"    gender = \"FEMALE\"",
							"} else {",
							"    gender = \"UNSPECIFIED\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1530088804208,
			"name": "Update User Email",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"responses": [],
			"preRequestScript": "var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);\nvar gender;\nif (userAvatar < 3) {\n    gender = \"MALE\"\n} else if (userAvatar < 6){\n    gender = \"FEMALE\"\n} else {\n    gender = \"UNSPECIFIED\"\n}\npostman.setEnvironmentVariable(\"userAvatar\", userAvatar);\npostman.setEnvironmentVariable(\"gender\", gender);",
			"tests": "var jsonData = JSON.parse(responseBody);\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\nvar user_id = pm.environment.get(\"user_id\");\nvar email = pm.environment.get(\"email_random\");\nvar gender = pm.environment.get(\"gender\");\nvar random = pm.environment.get(\"random\");\nvar userAvatar = pm.environment.get(\"userAvatar\")\ntests[\"userId\"] = jsonData.data.updateUser.id === user_id;\ntests[\"email\"] = jsonData.data.updateUser.email === email;\ntests[\"gender\"] = jsonData.data.updateUser.gender === gender;\ntests[\"displayedId\"] = responseBody.has(\"displayedId\");\ntests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);\ntests[\"gender\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";\ntests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
		},
		{
			"id": "123a6019-c635-1d43-26ed-67f89358f343",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"folder": null,
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e452f4f7-5c80-4cdc-a778-c6aec4d66c6c",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var random = pm.environment.get(\"random\");",
							"var id = Number(pm.environment.get(\"question_id\"));",
							"var text_random = pm.environment.get(\"text_random\")",
							"tests[\"answer_text\"] = jsonData.data.answerQuestion.text === text_random;",
							"tests[\"id\"] = responseBody.has(\"id\")",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "fae769d3-ac19-4abe-9ad2-4779c0958b8c",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days, Don't know ,Yes ,No ,maybe ,Big Mac - one love ,Getting married to a ,They rock ,I wish I know ,My boyfriend ,Go to the beach ,Coca cola ,It's not me ,Chinese food ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"auth": null,
			"time": 1529996782520,
			"name": "Answer  to Question",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"responses": [],
			"preRequestScript": "var text_random = \"\";\nfunction randomtext(){\n\n\tvar alphabet = \"I like vitamin water but I drink Fuji more these days, Don't know ,Yes ,No ,maybe ,Big Mac - one love ,Getting married to a ,They rock ,I wish I know ,My boyfriend ,Go to the beach ,Coca cola ,It's not me ,Chinese food ,\".split(\",\");\n\tvar wordCount = 1;\n\t\tfor(var i=0; i<wordCount; i++) {\n  \tvar rand = null;\n  \t\tfor (var x=0; x<1; x++) {\n    \t\trand = Math.floor(Math.random() * alphabet.length);\n    \t\ttext_random += alphabet[rand];\n  }\n  if (i<wordCount-1)\n    text_random += \" \";\n  else\n    text_random += \".\";\n}\n}\nrandomtext()\npostman.setEnvironmentVariable(\"text_random\", text_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar random = pm.environment.get(\"random\");\nvar id = Number(pm.environment.get(\"question_id\"));\nvar text_random = pm.environment.get(\"text_random\")\ntests[\"answer_text\"] = jsonData.data.answerQuestion.text === text_random;\ntests[\"id\"] = responseBody.has(\"id\")\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n",
			"currentHelper": null,
			"helperAttributes": null,
			"rawModeData": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id}}\\\", text:\\\"{{text_random}}\\\") {id text }}\"\n}"
		},
		{
			"id": "ade0f166-d080-3bc5-17c4-24f0a5047b07",
			"headers": "Authorization: Bearer {{admin_access_token}}\n",
			"headerData": [
				{
					"key": "Authorization",
					"value": "Bearer {{admin_access_token}}",
					"enabled": true,
					"description": ""
				}
			],
			"url": "http://{{server}}{{admin_port}}/admin/api/user?userId={{user_id}}",
			"queryParams": [
				{
					"key": "userId",
					"value": "{{user_id}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"auth": null,
			"time": 1528111559780,
			"name": "getUser code",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"responses": [],
			"isFromCollection": true,
			"folder": null,
			"timestamp": null,
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"response code\"] = responseCode.code === 200;\npostman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);\nif (tests[\"response code\"] !== true) {\n    console.log( \"response body: \" ,  responseBody)\n    console.log(\"request: \" ,  request)\n}",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "ba96f1a1-9ef9-052d-3267-070bac5f6015",
			"name": "SignIUp with email ME",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"method": "POST",
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0ecdb143-8e88-4bfe-8b3c-70e79084e618",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n\t\"query\":\"query User { user {id }}\"\n}",
			"pathVariables": {},
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"responses": [],
			"pathVariableData": [],
			"queryParams": [],
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"enabled": true,
					"description": ""
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"enabled": true,
					"description": ""
				}
			],
			"auth": null,
			"collection_id": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"folder": null,
			"timestamp": null,
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"user_id\", jsonData.data.user.id);\n\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "c7c5954e-fc8d-cdc9-449d-a5f2b6ce619e",
			"headers": "Content-Type: application/x-www-form-urlencoded\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/x-www-form-urlencoded",
					"enabled": true,
					"description": ""
				}
			],
			"url": "http://{{server}}{{admin_port}}/admin/login",
			"queryParams": [],
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b1277a7c-3cc6-446e-849a-216caceb047f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [
				{
					"key": "emailOrPhone",
					"value": "{{admin_email}}",
					"description": "",
					"type": "text",
					"enabled": true
				},
				{
					"key": "password",
					"value": "{{admin_password}}",
					"description": "",
					"type": "text",
					"enabled": true
				}
			],
			"dataMode": "urlencoded",
			"auth": null,
			"time": 1528109544111,
			"name": "ADMIN Login",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"responses": [],
			"isFromCollection": true,
			"folder": null,
			"timestamp": null,
			"preRequestScript": null,
			"tests": null,
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "eae28470-54a1-9e48-e046-110f03f0221b",
			"name": "SignIUp with email",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"method": "POST",
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "47b615fd-ae45-4aaa-bca7-e7a2e570bf8e",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);",
							"",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "60693239-9593-4957-b5f1-587f44feeda9",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"headers": "Content-Type: application/json",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n  \"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}",
			"pathVariables": {},
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"responses": [],
			"pathVariableData": [],
			"queryParams": [],
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"auth": null,
			"collection_id": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"preRequestScript": "var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);\nemail_random = \"sandbxtest8+\" + random + \"@gmail.com\"\npostman.setEnvironmentVariable(\"random\", random);\npostman.setEnvironmentVariable(\"email_random\", email_random);",
			"tests": "var jsonData = JSON.parse(responseBody);\npostman.setEnvironmentVariable(\"access_token\", jsonData.data.signup.access_token);\n\ntests[\"Body matches string\"] = responseBody.has(\"access_token\");\n\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n",
			"currentHelper": null,
			"helperAttributes": null
		},
		{
			"id": "f2a9445f-faf3-5508-f028-ee34f92ea552",
			"name": "Verify user Email",
			"collectionId": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"method": "POST",
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f22a2ef6-997b-497f-ac25-7f99719e48da",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{access_token}}",
			"dataMode": "raw",
			"data": [],
			"rawModeData": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}",
			"pathVariables": {},
			"url": "{{protocol}}://{{server}}{{port}}/graphql",
			"responses": [],
			"pathVariableData": [],
			"queryParams": [],
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"enabled": true,
					"description": ""
				},
				{
					"key": "Authorization",
					"value": "Bearer {{access_token}}",
					"enabled": true,
					"description": ""
				}
			],
			"auth": null,
			"collection_id": "5f0b74e5-e3fc-58c4-26fe-3c9c3129aa70",
			"isFromCollection": true,
			"folder": null,
			"timestamp": null,
			"preRequestScript": null,
			"tests": "var jsonData = JSON.parse(responseBody);\n\ntests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";\n\npm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});",
			"currentHelper": null,
			"helperAttributes": null
		}
	]
}