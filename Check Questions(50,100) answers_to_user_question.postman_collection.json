{
	"info": {
		"_postman_id": "58c3c9ec-cefc-4366-aee9-3ad7947b25cc",
		"name": "Check Questions(50,100) answers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ADMIN Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64d1bb17-629c-4f5f-9c03-2cb993fe57b0",
						"type": "text/javascript",
						"exec": [
							"pm.globals.set(\"count\", 0);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "emailOrPhone",
							"value": "{{admin_email}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{admin_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{admin_server}}{{admin_port}}/admin/login",
					"protocol": "http",
					"host": [
						"{{admin_server}}{{admin_port}}"
					],
					"path": [
						"admin",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignIUp with email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "447178ee-9b66-4733-8463-404644c19038",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"user_token\", jsonData.data.signup.access_token);",
							"",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "60693239-9593-4957-b5f1-587f44feeda9",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1d963906-f1ce-4f04-861e-a3b19c24ae1e",
						"type": "text/javascript",
						"exec": [
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"userId\", jsonData.data.user.id);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"query User { user {id }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser code1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_access_token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{admin_server}}{{admin_port}}/admin/api/user?userId={{userId}}",
					"protocol": "http",
					"host": [
						"{{admin_server}}{{admin_port}}"
					],
					"path": [
						"admin",
						"api",
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify user Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f22a2ef6-997b-497f-ac25-7f99719e48da",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a359a9c-3089-4898-a3aa-f1490370335d",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var user_id = pm.environment.get(\"userId\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"gender\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "askQuestion",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e6d1d5a5-11a2-48ae-824e-bedb50f6ea1e",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"I like vitamin water but I drink Fuji more these days, Don't know ,Yes ,No ,maybe ,Big Mac - one love ,Getting married to a ,They rock ,I wish I know ,My boyfriend ,Go to the beach ,Coca cola ,It's not me ,Chinese food ,\".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<1; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"question_text_random\", text_random);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9c66704b-1265-49f2-812f-86b1764dc0e5",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"postman.setEnvironmentVariable(\"question_id\", jsonData.data.askQuestion.id);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\" : \"mutation {askQuestion(text:\\\"{{question_text_random}}\\\") {id}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignIUp with email_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87ec8c42-d2a0-4226-9eea-d5e7cc02e581",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"secondary_user_token\", jsonData.data.signup.access_token);",
							"",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7ddbeabf-4070-49d7-8d81-6ac059077442",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user2_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f53cf58-808c-45c1-8cb4-a0d31641d099",
						"type": "text/javascript",
						"exec": [
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"second_userId\", jsonData.data.user.id);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"query User { user {id }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser code2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_access_token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{admin_server}}{{admin_port}}/admin/api/user?userId={{second_userId}}",
					"protocol": "http",
					"host": [
						"{{admin_server}}{{admin_port}}"
					],
					"path": [
						"admin",
						"api",
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{second_userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify user Email2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f22a2ef6-997b-497f-ac25-7f99719e48da",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Email2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5bd74c78-afe5-4112-9c61-0f46c1f85638",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var user_id = pm.environment.get(\"second_userId\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"gender\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Answer to Question",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "77c53ea4-fe70-4389-9802-1d7dfdb2549f",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var random = pm.environment.get(\"random\");",
							"var id = Number(pm.environment.get(\"question_id\"));",
							"var text_random = pm.environment.get(\"text_random\")",
							"tests[\"id\"] = responseBody.has(\"id\")",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var count = pm.globals.get(\"count\");",
							"if(count<50){",
							"    postman.setNextRequest(\"SignIUp with email_2\");",
							"    count = count+1;",
							"    pm.globals.set(\"count\", count);",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d7c91b3c-ce13-426a-bd2a-9b5c24c67b8f",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend , milk ,Dima ,Alina ,iPad , Basilur , KFC ,PlayStation ,Love, USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning \".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id}}\\\", text:\\\"electronic devices\\\") {id text }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user in AMG service_50",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "08abbb2b-8ac3-41f0-8f30-aebbd4bb03f0",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"question_bronze\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.achievements.QUESTION.BRONZE.unlocked.seen).to.eql(false);",
							"});",
							"",
							"pm.test(\"answer_silver\", function() {",
							"    var jsonData = pm.response.json();",
							"   pm.expect(jsonData.achievements.QUESTION.SILVER.unlocked).to.eql(null);",
							"});",
							"",
							"pm.test(\"pointsAmount\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.pointsAmount).to.eql(100);",
							"});",
							"",
							"pm.test(\"transactions\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.transactions[0].reward).to.eql(\"BRONZE\");",
							"});",
							"",
							"pm.test(\"progress\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.achievements.QUESTION.SILVER.inProgress[0].completed).to.eql(51);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "35de3d46-6772-45d6-9098-4b630c1257fd",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 30000);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation LoginTestUser {\\n  signin(emailOrPhone: \\\"{{email}}\\\", password: \\\"TestTest12\\\") {{user_}}\\n}\\n\\n# mutation askTestQuestions {\\n#   askQuestion(text: \\\"CHeck new ACHI has a correct behavior\\\", emojis: [\\\"1f602\\\", \\\"1f468\\\", \\\"1f44d\\\"]) {\\n#     id\\n#     text\\n#     emojis\\n#   }\\n# }\\n\\n\\n\\nmutation signUp {\\n  signup(emailOrPhone: \\\"newUser0000@gm.com\\\", password: \\\"PharaonKiev0000\\\") {\\n    access_token\\n  }\\n}\\n\\n\\nmutation answerTestQuestions {\\n  answerQuestion(questionId: \\\"LEsiavyusy\\\", text: \\\"answerTestSql\\\") {\\n    id\\n    text\\n  }\\n}\\n\\nmutation askTestQuestions {\\n  askQuestion(text: \\\"testest\\\") {\\n   id\\n  }\\n}\\n\\nquery getUserAnswers {\\n  user {\\n    dailyGoal {\\n      id\\n    }\\n    \\n  }\\n}\\n\\nquery notificationsFeed {\\n notificationsFeed(first:100) {\\n   edges {\\n     node {\\n       id\\n       title\\n       message\\n       redirect {\\n         url\\n         description\\n       }\\n       count\\n       lastUpdatedAt\\n       isSeen\\n       isRead\\n       details {\\n         __typename\\n         ... on NewAnswerNotificationDetails {\\n           question {\\n             id\\n             text\\n           }\\n         }\\n         ... on QuestionReactionNotificationDetails {\\n           question {\\n             id\\n             text\\n           }\\n           reactions {\\n             type\\n             count\\n           }\\n         }\\n         ... on AnswerReactionNotificationDetails {\\n           answer {\\n             id\\n             text\\n           }\\n           reactions {\\n             type\\n             count\\n           }\\n         }\\n         ... on AchievementNotificationDetails {\\n           achievement {\\nisNew\\n             id\\n             name\\n             seen\\n             read\\n             reward\\n             records {\\n               achievedAt\\n               redirect {\\n                 url\\n                 description\\n               }\\n             }\\n           }\\n         }\\n         ... on BalanceChangeNotificationDetails {\\n           points\\n           date\\n         }\\n       }\\n     }\\n   }\\n   totalCount\\n   totalUnseenCount\\n   totalUnreadCount\\n   pageInfo {\\n     hasNextPage\\n     hasPreviousPage\\n   }\\n }\\n}\\n\\nquery User {\\n user {\\n   achievements(filters:{seen:false read:false } markSeen:true) {\\n     reward\\n   }\\n   points\\n   balanceHistory {\\n     edges {\\n       node {\\n         date\\n         points\\n         type\\n         title\\n         description\\n        \\n       }\\n     }\\n   }\\n }\\n}\\n\\n\",\"variables\":null,\"operationName\":\"User\"}"
				},
				"url": {
					"raw": "http://{{server}}{{amg_port}}/v2/users/{{userId}}",
					"protocol": "http",
					"host": [
						"{{server}}{{amg_port}}"
					],
					"path": [
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignIUp with email_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87ec8c42-d2a0-4226-9eea-d5e7cc02e581",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"secondary_user_token\", jsonData.data.signup.access_token);",
							"",
							"tests[\"Body matches string\"] = responseBody.has(\"access_token\");",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7ddbeabf-4070-49d7-8d81-6ac059077442",
						"type": "text/javascript",
						"exec": [
							"var random =  Math.floor(Math.random() * (9999999 - 1000000)+1000000);",
							"email_random = \"sandbxtest8+\" + random + \"@gmail.com\"",
							"postman.setEnvironmentVariable(\"random\", random);",
							"postman.setEnvironmentVariable(\"email_random\", email_random);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"query\":\"mutation {signup(emailOrPhone:\\\"{{email_random}}\\\", password:\\\"{{password}}\\\") {access_token}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user3_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f53cf58-808c-45c1-8cb4-a0d31641d099",
						"type": "text/javascript",
						"exec": [
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"second_userId\", jsonData.data.user.id);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"query User { user {id }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "getUser code3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20fd7213-6562-4508-ae89-16ad1a2cf2f7",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"response code\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"emailCode\", jsonData.user.system.verification_codes.email);",
							"if (tests[\"response code\"] !== true) {",
							"    console.log( \"response body: \" ,  responseBody)",
							"    console.log(\"request: \" ,  request)",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{admin_access_token}}"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{admin_server}}{{admin_port}}/admin/api/user?userId={{second_userId}}",
					"protocol": "http",
					"host": [
						"{{admin_server}}{{admin_port}}"
					],
					"path": [
						"admin",
						"api",
						"user"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{second_userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify user Email3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f22a2ef6-997b-497f-ac25-7f99719e48da",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"VERIFIED\"] = jsonData.data.verifyCodeWithToken.isVerified === \"VERIFIED\";",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7fdf28dd-27b4-4507-be97-8dcb3288e4fd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"mutation { verifyCodeWithToken(code:{{emailCode}}){ isVerified }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User Email3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5bd74c78-afe5-4112-9c61-0f46c1f85638",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var user_id = pm.environment.get(\"second_userId\");",
							"var email = pm.environment.get(\"email_random\");",
							"var gender = pm.environment.get(\"gender\");",
							"var random = pm.environment.get(\"random\");",
							"var userAvatar = pm.environment.get(\"userAvatar\")",
							"tests[\"userId\"] = jsonData.data.updateUser.id === user_id;",
							"tests[\"email\"] = jsonData.data.updateUser.email === email;",
							"tests[\"gender\"] = jsonData.data.updateUser.gender === gender;",
							"tests[\"displayedId\"] = responseBody.has(\"displayedId\");",
							"tests[\"birthday\"] = jsonData.data.updateUser.birthday === Number(\"153\" + random);",
							"tests[\"gender\"] = jsonData.data.updateUser.state === \"ACTIVE_USER\";",
							"tests[\"avatar_id\"] = jsonData.data.updateUser.avatar_id === Number(userAvatar);"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "22a393de-b281-49d9-bee4-9c1708508845",
						"type": "text/javascript",
						"exec": [
							"var userAvatar =  Math.floor(Math.random() * (13 - 1)+1);",
							"var gender;",
							"if (userAvatar >= 6) {",
							"    gender = \"MALE\"",
							"} else {",
							"    gender = \"FEMALE\"",
							"}",
							"postman.setEnvironmentVariable(\"userAvatar\", userAvatar);",
							"postman.setEnvironmentVariable(\"gender\", gender);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\":\"mutation updateUser { updateUser (birthday:153{{random}}, gender:{{gender}}, avatar_id:{{userAvatar}}) { id, email, gender, displayedId, birthday, state, avatar_id }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Answer to Question",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7c94b25-e7e5-4805-b553-dcb968faddaf",
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var random = pm.environment.get(\"random\");",
							"var id = Number(pm.environment.get(\"question_id\"));",
							"var text_random = pm.environment.get(\"text_random\")",
							"tests[\"id\"] = responseBody.has(\"id\")",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var count = pm.globals.get(\"count\");",
							"if(count<100){",
							"    postman.setNextRequest(\"SignIUp with email_3\");",
							"    count = count+1;",
							"    pm.globals.set(\"count\", count);",
							"}",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d7c91b3c-ce13-426a-bd2a-9b5c24c67b8f",
						"type": "text/javascript",
						"exec": [
							"var text_random = \"\";",
							"function randomtext(){",
							"",
							"\tvar alphabet = \"Apple ,Samsung ,Coffe ,friend , milk ,Dima ,Alina ,iPad , Basilur , KFC ,PlayStation ,Love, USA ,CANADA ,freindship ,mother ,Tesla ,Amazon ,Netflix ,Incyte ,Naver ,Asian Paints ,Adobe Systems ,Autodesk ,Illumina , Don't know ,Yes ,No ,maybe ,Apricot ,Avocado ,Banana ,Bilberry ,Blackberry ,Blackcurrant ,Blueberry ,Boysenberry ,Buddha's hand (fingered citron) ,Crab apples ,Currant ,Cherry ,Cherimoya ,Chico fruit ,Cloudberry ,Coconut ,Cranberry ,Cucumber ,Custard apple ,Lost Tree ,The Cotton Tree ,Drago Milenario ,Cypress of Abarkuh ,Los Angeles ,San Luis Obispo ,Kings ,Banning \".split(\",\");",
							"\tvar wordCount = 1;",
							"\t\tfor(var i=0; i<wordCount; i++) {",
							"  \tvar rand = null;",
							"  \t\tfor (var x=0; x<5; x++) {",
							"    \t\trand = Math.floor(Math.random() * alphabet.length);",
							"    \t\ttext_random += alphabet[rand];",
							"  }",
							"  if (i<wordCount-1)",
							"    text_random += \" \";",
							"  else",
							"    text_random += \".\";",
							"}",
							"}",
							"randomtext()",
							"postman.setEnvironmentVariable(\"text_random\", text_random);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{secondary_user_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"query\" : \"mutation { answerQuestion(questionId: \\\"{{question_id}}\\\", text:\\\"electronic devices\\\") {id text }}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{server}}{{port}}/graphql",
					"protocol": "{{protocol}}",
					"host": [
						"{{server}}{{port}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check user in AMG service_100",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49b5ed7c-08bb-4811-8559-8d92c9b4a121",
						"type": "text/javascript",
						"exec": [
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"question_silver\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.achievements.QUESTION.SILVER.unlocked.seen).to.eql(false);",
							"});",
							"",
							"pm.test(\"answer_gold\", function() {",
							"    var jsonData = pm.response.json();",
							"   pm.expect(jsonData.achievements.QUESTION.GOLD.unlocked).to.eql(null);",
							"});",
							"",
							"pm.test(\"pointsAmount\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.pointsAmount).to.eql(300);",
							"});",
							"",
							"pm.test(\"transactions\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.transactions[0].reward).to.eql(\"SILVER\");",
							"});",
							"",
							"pm.test(\"progress\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.achievements.QUESTION.GOLD.inProgress[0].completed).to.eql(102);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "71b5f90a-9318-4f59-acdc-5f3df23ec69c",
						"type": "text/javascript",
						"exec": [
							"setTimeout(function(){}, 30000);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation LoginTestUser {\\n  signin(emailOrPhone: \\\"{{email}}\\\", password: \\\"TestTest12\\\") {{user_}}\\n}\\n\\n# mutation askTestQuestions {\\n#   askQuestion(text: \\\"CHeck new ACHI has a correct behavior\\\", emojis: [\\\"1f602\\\", \\\"1f468\\\", \\\"1f44d\\\"]) {\\n#     id\\n#     text\\n#     emojis\\n#   }\\n# }\\n\\n\\n\\nmutation signUp {\\n  signup(emailOrPhone: \\\"newUser0000@gm.com\\\", password: \\\"PharaonKiev0000\\\") {\\n    access_token\\n  }\\n}\\n\\n\\nmutation answerTestQuestions {\\n  answerQuestion(questionId: \\\"LEsiavyusy\\\", text: \\\"answerTestSql\\\") {\\n    id\\n    text\\n  }\\n}\\n\\nmutation askTestQuestions {\\n  askQuestion(text: \\\"testest\\\") {\\n   id\\n  }\\n}\\n\\nquery getUserAnswers {\\n  user {\\n    dailyGoal {\\n      id\\n    }\\n    \\n  }\\n}\\n\\nquery notificationsFeed {\\n notificationsFeed(first:100) {\\n   edges {\\n     node {\\n       id\\n       title\\n       message\\n       redirect {\\n         url\\n         description\\n       }\\n       count\\n       lastUpdatedAt\\n       isSeen\\n       isRead\\n       details {\\n         __typename\\n         ... on NewAnswerNotificationDetails {\\n           question {\\n             id\\n             text\\n           }\\n         }\\n         ... on QuestionReactionNotificationDetails {\\n           question {\\n             id\\n             text\\n           }\\n           reactions {\\n             type\\n             count\\n           }\\n         }\\n         ... on AnswerReactionNotificationDetails {\\n           answer {\\n             id\\n             text\\n           }\\n           reactions {\\n             type\\n             count\\n           }\\n         }\\n         ... on AchievementNotificationDetails {\\n           achievement {\\nisNew\\n             id\\n             name\\n             seen\\n             read\\n             reward\\n             records {\\n               achievedAt\\n               redirect {\\n                 url\\n                 description\\n               }\\n             }\\n           }\\n         }\\n         ... on BalanceChangeNotificationDetails {\\n           points\\n           date\\n         }\\n       }\\n     }\\n   }\\n   totalCount\\n   totalUnseenCount\\n   totalUnreadCount\\n   pageInfo {\\n     hasNextPage\\n     hasPreviousPage\\n   }\\n }\\n}\\n\\nquery User {\\n user {\\n   achievements(filters:{seen:false read:false } markSeen:true) {\\n     reward\\n   }\\n   points\\n   balanceHistory {\\n     edges {\\n       node {\\n         date\\n         points\\n         type\\n         title\\n         description\\n        \\n       }\\n     }\\n   }\\n }\\n}\\n\\n\",\"variables\":null,\"operationName\":\"User\"}"
				},
				"url": {
					"raw": "http://{{server}}{{amg_port}}/v2/users/{{userId}}",
					"protocol": "http",
					"host": [
						"{{server}}{{amg_port}}"
					],
					"path": [
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}